ALWAYS OPEN:
- Code Conventions: bei erzeugen von variable den typ immer mit angeben, bei listen kann dann auch z.B. list[int] stehen
- Code Conventions: bei methoden den rückgabewert mit angeben, auch -> None, kannst dir das grob bei mir abgucken



OPEN:
- vertikales centering für die messages im MessageBoard



WIP(Jonas):

WIP(Mathias):
- Tasks fixen, numberOfColors und Color XYZ equal noch fehlerhaft
- draw Dice(display mouse) aufteilen in draw(display) und checkForMouseInput(mouse) - ggfs in dice auslagern


DONE:
- Winner label im endscreen
- TaskHelper.getDefaultTasks umändern, dass direkt 2 elemente übergeben werden, sodass tasks nicht doppelt vorkommen können
- tasten für interaktionen
- Task.getInfo() auf zu lange teilstings überprüfen, es einzelne elemente sind zu lang
- in mainscreen die option anbieten, enable/disable all
- im startingScreen buttons etc hinzufügen um spieler hinzuzufügen (bei bedarf auch schon die umbenennung der spielernamen ermöglichen, ist aber erstmal nicht relevant)
- taskCompletionIndicator, pointsTable und auch messageboard funktioniert nicht bei kribbeln, ggfs lösung durch isComleted(dice, player=None)
- MainScreen onEvent und checkForMouseInput zusammenlegen. mit zB "if button1.mouseIsIn(mouse) and event.type == MOUSEBUTTONDOWN: do sth" 
- scoreBoard.resultingPoints berücksichtigt noch nicht punktegleichheit
- kribbeln.py löschen und game.py umbenennen
- punkte verteilung hinterlegen
- im StartingScreen zugriff ändern auf Game.players
- noRerollsLeft indicator als rerollButtonOverlay (zB roter strich der das wort reroll durchstreicht)
- im mainscreen ein Label für den aktuellen spieler(oben links)
- Infobox für TaskInfo(echts neben oder in Taskanzeige(Tooltip)), öffnet dialog mit text Task.getInfos()
- draw/isIn Methoden ggfs in Klassen auslagern
- startinScreen on_event aufräumen
- Enum "GameState" erstellen mit elementen "STARTING", "PLAYING", "FINISHED". also namen sind egal aber um die anzeige und die inputmöglichkeiten zu kontrollieren
- taskInfo in eine liste aufteilen, sodass diese über mehrere zeilen ausgegeben werden können
- players und gamestate in game verschieben
- klasse MessageBoard erstellen, das erstmal den schließdialog anzeigt (später können wir hier beim spielerwechsel die erreichten punkte und den nächsten spielernamen anzeigen)
- button zum schließen  des spiels hinzufügen(oben rechts), da sollte erstmal ein "Willst du wirklich beenden"-Dialog kommen(ggfs stateunabhängig, evtl auch nur starting und playing)
- boolean flags isShowMessageBoard und isShowScoreBoard die sowohl zum zeichen berücksichtigt werden, als auch in der eventloop die erste bedingungseben darstellen sollten, 2te ebene sollte dann der Gamestate sein, unterste ebene ist dann der aktuelle inhalt
- beim zeichen sollte die Gamestates ein elseIf konstukt bilden, anschließend über die boolean flags messageboard bzw scoreboard als overlay
- Klasse endscreen erstellen, die erstmal die Optionen "New Game", "Replay" und "Exit" anbieten soll (später soll da auch das scoreBoard angezeigt werden)
- reroll begrenzung hinterlegen
- option zum anzeigen des scoreboards, das muss dann auch wieder schließbar sein, das ding kann auch erstmal leer bleiben.